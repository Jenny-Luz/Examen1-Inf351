# -*- coding: utf-8 -*-
"""Ejercicio1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1sJbyt4g9uMOGfyzPK22mlTFvi_uzGkk_
"""

# INCISO A
import os

filename = "/content/autos.csv"

# Verificar si el archivo existe
if not os.path.isfile(filename):
    print(f"El archivo {filename} no se encuentra en la ruta especificada.")
else:
    # Función para calcular el percentil de una lista de valores
    def calculate_percentile(data, percentile):
        size = len(data)
        sorted_data = sorted(data)
        index = (size - 1) * percentile / 100.0
        lower = int(index)
        upper = lower + 1
        weight = index - lower
        if upper < size:
            return sorted_data[lower] * (1 - weight) + sorted_data[upper] * weight
        else:
            return sorted_data[lower]

    try:
        # Abrir archivo y leer las líneas con una codificación diferente
        with open(filename, 'r', encoding='latin1') as file:
            lines = file.readlines()

        # Obtener las cabeceras y los datos
        headers = lines[0].strip().split(',')
        data = [line.strip().split(',') for line in lines[1:]]

        # Transponer los datos para obtener columnas, filtrando solo los datos numéricos
        columns = {}
        for i in range(len(headers)):
            col_data = []
            for row in data:
                try:
                    col_data.append(float(row[i]))
                except ValueError:
                    # Ignorar valores que no se pueden convertir a float
                    continue
            columns[headers[i]] = col_data

        # Calcular el último cuartil (Q3) y el percentil 80 por columna
        for col_name, col_data in columns.items():
            if col_data:  # Solo procesar si la columna no está vacía
                Q3 = calculate_percentile(col_data, 75)
                P80 = calculate_percentile(col_data, 80)
                print(f"Columna: {col_name}")
                print(f"  Último cuartil (Q3): {Q3}")
                print(f"  Percentil 80: {P80}")
    except Exception as e:
        print(f"Error al leer el archivo: {e}")

# INCISO B
import pandas as pd
import numpy as np

filename = "/content/autos.csv"

# Leer el archivo CSV con pandas
try:
    df = pd.read_csv(filename, encoding='latin1')
except FileNotFoundError:
    print(f"El archivo {filename} no se encuentra en la ruta especificada.")
except Exception as e:
    print(f"Error al leer el archivo: {e}")
else:
    # Iterar sobre cada columna del DataFrame
    for col in df.columns:
        # Intentar convertir la columna a valores numéricos, ignorando los errores
        df[col] = pd.to_numeric(df[col], errors='coerce')

        # Eliminar los valores NaN que resultan de la conversión
        col_data = df[col].dropna()

        if not col_data.empty:
            # Calcular el último cuartil (Q3) y el percentil 80
            Q3 = np.percentile(col_data, 75)
            P80 = np.percentile(col_data, 80)
            print(f"Columna: {col}")
            print(f"  Último cuartil (Q3): {Q3}")
            print(f"  Percentil 80: {P80}")

# INCISO C
import pandas as pd
import numpy as np
from scipy import stats

filename = "/content/autos.csv"

# Leer el archivo CSV con pandas
try:
    df = pd.read_csv(filename, encoding='latin1')
except FileNotFoundError:
    print(f"El archivo {filename} no se encuentra en la ruta especificada.")
except Exception as e:
    print(f"Error al leer el archivo: {e}")
else:
    # Iterar sobre cada columna del DataFrame
    for col in df.columns:
        # Intentar convertir la columna a valores numéricos, ignorando los errores
        df[col] = pd.to_numeric(df[col], errors='coerce')

        # Eliminar los valores NaN que resultan de la conversión
        col_data = df[col].dropna()

        if not col_data.empty:
            # Calcular estadísticas
            mean = col_data.mean()
            median = col_data.median()
            mode = col_data.mode().values
            if len(mode) == 1:
                mode = mode[0]
            else:
                mode = mode.tolist()
            geom_mean = stats.gmean(col_data)

            print(f"Columna: {col}")
            print(f"  Media: {mean}")
            print(f"  Mediana: {median}")
            print(f"  Moda: {mode}")
            print(f"  Media geométrica: {geom_mean}")

# INCISO D
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy import stats

filename = "/content/autos.csv"

# Leer el archivo CSV con pandas
try:
    df = pd.read_csv(filename, encoding='latin1')
except FileNotFoundError:
    print(f"El archivo {filename} no se encuentra en la ruta especificada.")
except Exception as e:
    print(f"Error al leer el archivo: {e}")
else:
    # Configurar el estilo de las gráficas
    sns.set(style="whitegrid")

    # Iterar sobre cada columna del DataFrame
    for col in df.columns:
        # Intentar convertir la columna a valores numéricos, ignorando los errores
        df[col] = pd.to_numeric(df[col], errors='coerce')

        # Eliminar los valores NaN que resultan de la conversión
        col_data = df[col].dropna()

        if not col_data.empty:
            # Calcular estadísticas
            mean = col_data.mean()
            median = col_data.median()
            mode = col_data.mode().values
            if len(mode) == 1:
                mode = mode[0]
            else:
                mode = mode.tolist()
            geom_mean = stats.gmean(col_data)

            print(f"Columna: {col}")
            print(f"  Media: {mean}")
            print(f"  Mediana: {median}")
            print(f"  Moda: {mode}")
            print(f"  Media geométrica: {geom_mean}")

            # Graficar los datos
            plt.figure(figsize=(10, 6))
            sns.histplot(col_data, kde=True, bins=30, color='blue')
            plt.axvline(mean, color='red', linestyle='dashed', linewidth=2, label=f'Media: {mean:.2f}')
            plt.axvline(median, color='green', linestyle='dashed', linewidth=2, label=f'Mediana: {median:.2f}')
            if isinstance(mode, list):
                for m in mode:
                    plt.axvline(m, color='purple', linestyle='dashed', linewidth=2, label=f'Moda: {m:.2f}')
            else:
                plt.axvline(mode, color='purple', linestyle='dashed', linewidth=2, label=f'Moda: {mode:.2f}')
            plt.axvline(geom_mean, color='orange', linestyle='dashed', linewidth=2, label=f'Media geométrica: {geom_mean:.2f}')
            plt.legend()
            plt.title(f'Distribución de {col}')
            plt.xlabel(col)
            plt.ylabel('Frecuencia')
            plt.show()