# -*- coding: utf-8 -*-
"""Ejercicio3.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ktaoeEFQNo2GkiIyDcJdZhaNfYcA_I2_
"""

# EJERCICIO 3
import pandas as pd
from sklearn.preprocessing import OneHotEncoder, LabelEncoder, StandardScaler, MinMaxScaler, RobustScaler

# Cargar el dataset especificando la codificación 'latin1'
filename = "/content/autos.csv"
df = pd.read_csv(filename, encoding='latin1')

# Verificar las columnas presentes en el DataFrame
print(df.columns)

# Realizar el preprocesamiento
# Verificar que 'categorical_column' existe en el DataFrame
if 'marca' in df.columns:
    # OneHotEncoder
    encoder = OneHotEncoder(sparse=False)  # Specifying sparse=False to get a dense array
    encoded_data = encoder.fit_transform(df[['marca']])

    # LabelEncoder
    label_encoder = LabelEncoder()
    df['encoded_target_column'] = label_encoder.fit_transform(df['target_column'])

    # Escalado con StandardScaler
    scaler = StandardScaler()
    df['scaled_numerical_column'] = scaler.fit_transform(df[['numerical_column']])

    # Escalado con MinMaxScaler
    minmax_scaler = MinMaxScaler()
    df['minmax_scaled_numerical_column'] = minmax_scaler.fit_transform(df[['numerical_column']])

    # Escalado con RobustScaler
    robust_scaler = RobustScaler()
    df['robust_scaled_numerical_column'] = robust_scaler.fit_transform(df[['numerical_column']])

    # Verificar los cambios
    print(df.head())
else:
    print("La columna 'marca' no está presente en el DataFrame.")